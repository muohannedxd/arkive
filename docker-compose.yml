version: '3.8'

services:
  # KAFKA
  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:7.2.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - backend

  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:7.2.1
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    networks:
      - backend

  # REDIS FOR CACHING
  redis:
    container_name: arkive-redis
    image: redis:alpine
    ports:
      - "6380:6379"
    networks:
      - backend

  # DATABASES
  users-db:
    container_name: users-db
    image: postgres:16
    env_file:
      - ./arkive-backend/users-service/.env
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "5433:5432"
    volumes:
      - users-db-data:/var/lib/postgresql/data
    networks:
      - backend

  documents-db:
    container_name: documents-db
    image: postgres:16
    environment:
      POSTGRES_DB: documents-db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5434:5432"
    volumes:
      - documents-db-data:/var/lib/postgresql/data
    networks:
      - backend


  # BACKEND SERVICES
  users-service:
    container_name: users-service
    build: ./arkive-backend/users-service
    volumes:
      - ./arkive-backend/users-service:/app
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=development
    env_file:
      - ./arkive-backend/users-service/.env
    depends_on:
      - users-db
    networks:
      - backend

  auth-service:
    container_name: auth-service
    build:
      context: ./arkive-backend/auth-service
    ports:
      - "8081:8080"
    depends_on:
      - users-service
      - redis
    networks:
      - backend

  documents-service:
    container_name: documents-service
    build: ./arkive-backend/documents-service
    ports:
      - "8082:8080"
    depends_on:
      - documents-db
    networks:
      - backend

  storage-service:
    container_name: storage-service
    build: ./arkive-backend/storage-service
    ports:
      - "8001:8000"
    networks:
      - backend
    profiles: ["dev"]

  translation-service:
    container_name: translation-service
    build: ./arkive-backend/translation-service
    ports:
      - "8002:8000"
    env_file:
      - ./arkive-backend/translation-service/.env
    depends_on:
      - kafka
      - zookeeper
    networks:
      - backend

  gateway-api:
    container_name: gateway-api
    build: ./arkive-backend/gateway-api
    ports:
      - "8003:8000"
    networks:
      - backend
    profiles: ["dev"]


  # FRONTEND SERVICE
  frontend:
    container_name: frontend
    build: ./arkive-dms
    ports:
      - "3000:3000"
    depends_on:
      - users-service
      - auth-service
      - documents-service
      - translation-service
    networks:
      - backend

volumes:
  users-db-data:
  documents-db-data:

networks:
  backend:
